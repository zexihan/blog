---
layout:     post
title:      "<>DS - Heap (2)"
subtitle:   "DS Note"
date:       2016-11-26
author:     "Zexi"
header-img: "img/post-bg-js-module.jpg"
catalog: true
tags:
    - Algorithms
    - Data Structure
---



## Heap (2)

http://www.cnblogs.com/coderworld/p/datastructure-heap.html

### Heap简介

Heap译为“堆”，是一种特殊的树形数据结构，它满足所有堆的特性：父节点的值大于等于子节点的值(max heap)，或者小于等于子节点的值(min heap)。对于max heap 根节点的值为整个树最大值，反之亦然，min heap 根节点的值为整个树最小值。本文采用Java编程语言简单实现min heap。


### Java Heap

对于大多数应用来说，Java堆 (Java Heap) 是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。

### 结构示意图

![min heap](img/in-post/2016-11-26-DS-Heap(2)/1.png "min heap") 

min heap

![max heap](img/in-post/2016-11-26-DS-Heap(2)/2.png "max heap")  

max heap


### 结构转换

不像其他的树形结构，例如二叉查找树，采用链表的形式实现，Heap一般用数组实现。这种数组采用自上至下，自左至右的形式从树中添加元素。图2-2展示了如何把图2-1树形结构(不是Heap数据结构)存储到数组中。箭头指向数组中每个元素的直接左孩子和右孩子。          

![图2-1](img/in-post/2016-11-26-DS-Heap(2)/3.png "图2-1")

图2-1

![图2-2](img/in-post/2016-11-26-DS-Heap(2)/4.png "图2-2")

图2-2

仅用一个数组是不足以表示一个堆，程序在运行时的操作可能会超过数组的大小。因此我们需要一个更加动态的数据结构，满足以下特性：

1.我们可以指定数组的初始化大小。

2.这种数据结构封装了自增算法，当程序需要时，能够增加数组的大小以满足需求。

这会使我们联想起ArrayList的实现，正是采用这种数据结构。本文就采用了ArrayList的自增算法。

因为我们使用数组，我们需要知道如何计算指定节点(index)的父节点、左孩子和右孩子的索引。

parent index : (index - 1) / 2

left child : 2 * index + 1

right child : 2 * index + 2